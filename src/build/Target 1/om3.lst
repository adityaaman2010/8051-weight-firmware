C51 COMPILER V9.60.0.0   OM3                                                               10/03/2022 19:06:34 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE OM3
OBJECT MODULE PLACED IN .\build\Target 1\om3.o
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.exe .\OM3.C OMF2 TABS(4) CODE NOCOND SYMBOLS PRINT(.\build\Target 1\om3.lst)
                    - INCDIR(../../../../../../Keil_v5/C51/INC) DEFINE(__UVISION_VERSION=526) OPTIMIZE(8,SIZE) SMALL ROM(LARGE) OBJECT(.\buil
                    -d\Target 1\om3.o)

line level    source

   1          #include <stdio.h>
   2          #include <stdlib.h>
   3          #include <string.h>
   4          #include "REG_MG82FG5Bxx.H"
   5          #include "macro.h"
   6          #include "utility.h"
   7          #include "tm1640.h"
   8          #include "keypad.h"
   9          #include "weight.h"
  10          #include "memory.h"
  11          
  12          
  13          
  14          void key_display(void);
  15          void Keypad_GPIO_Config(void);
  16          void displayPrice(void);
  17          void addToInputPrice(void);
  18          void displayWeight(void);
  19          void handleModeOne(void);
  20          void loadMemory(void);
  21          void clearPrice(void);
  22          void handleNumberInput(void);
  23          void key_sort(unsigned char);
  24          unsigned char* getCharArray(int);
  25          unsigned char* getNumberDisplayFloat(float, int, int);
  26          void initializeDisplay();
  27          
  28          unsigned char xdata hi_key_no, lo_key_no;
  29          unsigned char xdata overflowHex[] = {0x10, 0x10, 0x10, 0x10, 0x10, 0x10};
  30          unsigned char xdata no_digits[] = {0xed,0xa0,0xd9,0xf8,0xb4,0x7c,0x7d,0xe0,0xfd,0xfc};  //0,1,2,3,4,5,6,7,8
             -,9
  31          unsigned char xdata digi_chk[] = {0x40,0xc0,0xe0,0xe8,0xe9,0xed,0xfd};
  32          unsigned char xdata prc[] = {0x00, 0x4d,0x45, 0xd5, 0x00};
  33          unsigned char xdata ver[] = { 0xed, 0xa2,0x00,0x45,0x5d, 0xad};
  34          unsigned char xdata compny_name[] = { 0xb5, 0x5d,0x0d, 0x0d, 0xed, 0x10, 0x7c, 0x4d, 0xf5,0x0d,0x00,0x00,0
             -x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
  35          unsigned char xdata blank_L[] = { 0x00,0x00,0x00,0x00,0x00,0x00};
  36          unsigned char xdata bat_digi[] = { 0x00,0x1d, 0xf5, 0xfd,0x00};
  37          unsigned char xdata bat_voltg[] = { 0xb4,0xa2, 0xa0, 0x00,0x00};
  38          // flag to check if decimal mode activated
  39          int xdata isDecimal = 0,afterDecimal = 0;
  40          int xdata precision = 2, mode = 1, isOverflow = 0;
  41          float xdata weight, total, currentPrice;
  42          unsigned char xdata key, inputPrice[7], temp[1], final_display[7], savingTo;
  43          unsigned char* output;
  44          
  45          
  46          void main(void)
  47          {
  48   1          initializeDisplay();
  49   1          while(1)
  50   1          {
  51   2              weight = getWeight();
C51 COMPILER V9.60.0.0   OM3                                                               10/03/2022 19:06:34 PAGE 2   

  52   2              key = scan_keypad();
  53   2              Delay_Some_Time(10);
  54   2              if(key != 'A') {
  55   3                  if (mode == 1)
  56   3                  {
  57   4                      if (key == 16)
  58   4                      {
  59   5                          // set mode
  60   5                          mode = 2;
  61   5                          // default save to memory 1
  62   5                          savingTo = 17;
  63   5                          clearPrice();
  64   5                          displayPrice();
  65   5                          /*
  66   5                          TODO: set left side display
  67   5                          */
  68   5                          continue;
  69   5                      }
  70   4                      if (key > 16)
  71   4                      {
  72   5                          loadMemory();
  73   5                          continue;
  74   5                      }
  75   4                      handleNumberInput();
  76   4                      displayWeight();
  77   4                      
  78   4                  }else if (mode == 2)
  79   3                  {
  80   4                      handleNumberInput();
  81   4                  }else if (mode == 3)
  82   3                  {
  83   4                      if (key == 11)
  84   4                      {
  85   5                          clearPrice();
  86   5                          mode = 1;
  87   5                          displayPrice();
  88   5                      }else if (key > 16)
  89   4                      {
  90   5                          loadMemory();
  91   5                      }
  92   4                      displayWeight();
  93   4                  }
  94   3                  
  95   3                  
  96   3              }
  97   2              Delay_Some_Time(10);
  98   2          }
  99   1              
 100   1      }
 101          
 102          void displayWeight(void)
 103          {
 104   1          output = getNumberDisplayFloat(weight, 5, precision);
 105   1          TM1640_U_display(output);
 106   1      }
 107          
 108          void loadMemory(void)
 109          {
 110   1          float x;
 111   1          x = getPriceFromMemory(key);
 112   1          if (x != -1)
 113   1          {
C51 COMPILER V9.60.0.0   OM3                                                               10/03/2022 19:06:34 PAGE 3   

 114   2              // mode in which current price is immutable
 115   2              mode = 3;
 116   2              currentPrice = x;
 117   2              displayPrice();
 118   2          }
 119   1      }
 120          
 121          void handleNumberInput(void)
 122          {
 123   1          isOverflow = (isDecimal == 1 && strlen(inputPrice) < 6) || ((isDecimal == 0 && strlen(inputPrice) + pr
             -ecision < 6) && key == 10) || (isDecimal == 0 && strlen(inputPrice) + precision < 5) ? 0 : 1;
 124   1          if ((key < 11 && isOverflow == 0) || key == 11)
 125   1          {
 126   2              handleModeOne();
 127   2          }
 128   1      }
 129          
 130          void handleModeOne(void)
 131          {
 132   1          if(key == 11)
 133   1          {
 134   2              clearPrice();
 135   2          }
 136   1          else if (key < 10 &&  isDecimal == 0)
 137   1          {
 138   2              addToInputPrice();
 139   2          }
 140   1          else if (key == 10 && isDecimal == 0)
 141   1          {
 142   2              isDecimal = 1;
 143   2              return;
 144   2          }
 145   1          else if (key < 10 &&  isDecimal == 1 && afterDecimal == 0)
 146   1          {
 147   2              // first number pressed after "."
 148   2              temp[0] = '.';
 149   2              joinCharacter(inputPrice, temp);
 150   2              key = 0x30 | key;
 151   2              temp[0] = key;
 152   2              joinCharacter(inputPrice, temp);
 153   2              afterDecimal = 1;
 154   2              currentPrice = atof(inputPrice);
 155   2          }
 156   1          else if (key < 10 &&  isDecimal == 1 && afterDecimal == 1)
 157   1          {
 158   2              addToInputPrice();
 159   2          }
 160   1          displayPrice();
 161   1      }
 162          
 163          void clearPrice(void)
 164          {
 165   1          inputPrice[0] = '\0';
 166   1          isDecimal = 0;
 167   1          afterDecimal = 0;
 168   1          currentPrice = 0.0;
 169   1      }
 170          
 171          void addToInputPrice(void)
 172          {
 173   1          key = 0x30 | key;
 174   1          temp[0] = key;
C51 COMPILER V9.60.0.0   OM3                                                               10/03/2022 19:06:34 PAGE 4   

 175   1          joinCharacter(inputPrice, temp);
 176   1          currentPrice = atof(inputPrice);
 177   1      }
 178          
 179          void displayPrice(void)
 180          {
 181   1          total = currentPrice * weight;
 182   1          output = getNumberDisplayFloat(currentPrice,5, precision);
 183   1          TM1640_M_display(output);
 184   1          output = getNumberDisplayFloat(total, 6, precision);
 185   1          TM1640_L_display(output);
 186   1      }
 187          
 188          void Keypad_GPIO_Config(void)
 189          {
 190   1              P1M0 = 0x1f;
 191   1              P22 = 1;
 192   1              P24 = 1;
 193   1              P26 = 1;
 194   1              P16 = 1;
 195   1              P15 = 1;
 196   1              P10 = 0;
 197   1              P11 = 0;
 198   1              P12 = 0;
 199   1              P13 = 0;
 200   1              P14 = 0;
 201   1              
 202   1      }
 203          
 204          unsigned char* getNumberDisplayFloat(float x, int displayLength, int precision)
 205          {
 206   1          unsigned char value[8];
 207   1          unsigned char t[8];
 208   1          int value_len = 0;
 209   1          int set_flag = 0;
 210   1          int after_display = 0;
 211   1          int y, i, index;
 212   1          unsigned char a;
 213   1          if (precision == 0)
 214   1          {
 215   2              sprintf(value, "%.0f", x);
 216   2          }
 217   1          else if (precision == 1)
 218   1          {
 219   2              sprintf(value, "%.1f", x);
 220   2          }
 221   1          else if (precision == 2)
 222   1          {
 223   2              sprintf(value, "%.2f", x);
 224   2          }
 225   1          else if (precision == 3)
 226   1          {
 227   2              sprintf(value, "%.3f", x);
 228   2          }
 229   1          for(i=0; i<strlen(value);i++)
 230   1          {
 231   2              if(value[i] == '.'){
 232   3                  break;
 233   3              }
 234   2              else{
 235   3                  value_len++;
 236   3              }
C51 COMPILER V9.60.0.0   OM3                                                               10/03/2022 19:06:34 PAGE 5   

 237   2          }
 238   1          if((value_len + precision) > (displayLength))
 239   1          {
 240   2              // Display out of bound values on display
 241   2              return overflowHex;
 242   2          }
 243   1      
 244   1          for (i= strlen(value) - 1; i > -1; i--)
 245   1          {
 246   2              y = strlen(value) - 1 - i;
 247   2              t[y] = value[i];
 248   2          }
 249   1          t[strlen(value)] = '\0';
 250   1          for(i=0;i < displayLength; i++)
 251   1          {
 252   2              final_display[i] = BLANK_HEX;
 253   2          }
 254   1          for(i=0;i < strlen(t); i++)
 255   1          {
 256   2              if(t[i]  == '.')
 257   2              {
 258   3                  set_flag = 1;
 259   3                  after_display = 1;
 260   3                  continue;
 261   3              }
 262   2              index = t[i] & 0x0f;
 263   2              a = no_digits[index];
 264   2              if(after_display == 1)
 265   2              {
 266   3                  if (set_flag == 1)
 267   3                  {
 268   4                      a = 0x02 | a;
 269   4                      final_display[i-1] = a;
 270   4                      set_flag = 0;
 271   4                  }
 272   3                  else
 273   3                  {
 274   4                      final_display[i-1] = a;
 275   4                  }
 276   3              }
 277   2              else
 278   2              {
 279   3                  final_display[i] = a;
 280   3              }
 281   2              
 282   2          }
 283   1          return final_display;
 284   1      }
 285          
 286          void key_display(void)
 287          {
 288   1         unsigned char temp[6];
 289   1         temp[0] = lo_key_no;
 290   1         temp[1] = hi_key_no;
 291   1         temp[2] = BLANK_HEX;
 292   1         temp[3] = BLANK_HEX;
 293   1         temp[4] = BLANK_HEX;
 294   1         temp[5] = BLANK_HEX;
 295   1         TM1640_L_display(temp);
 296   1      
 297   1      }
 298          void key_sort(unsigned char temp_key)
C51 COMPILER V9.60.0.0   OM3                                                               10/03/2022 19:06:34 PAGE 6   

 299          {
 300   1         if(temp_key <10)
 301   1         {
 302   2             hi_key_no = 0;
 303   2             lo_key_no = temp_key;
 304   2         }
 305   1         else
 306   1         {
 307   2             hi_key_no = temp_key/10;
 308   2             lo_key_no = temp_key%10;
 309   2         }
 310   1         hi_key_no = no_digits[hi_key_no];
 311   1         lo_key_no = no_digits[lo_key_no];
 312   1      }
 313          
 314          void initializeDisplay()
 315          {
 316   1          TM1640_GPIO_Config();
 317   1          Keypad_GPIO_Config();
 318   1          TM1640_Init(DSPTM1640_DIS);         //TM1640 initialization
 319   1          Delay_Some_Time(10 );
 320   1      
 321   1          TM1640_U_display(blank_L);
 322   1          TM1640_M_display(blank_L);
 323   1          TM1640_L_display(blank_L);
 324   1      
 325   1          TM1640_U_display(prc);
 326   1          ldelay();
 327   1      
 328   1          TM1640_L_display(ver);
 329   1          ldelay();
 330   1      
 331   1          TM1640_L_display(blank_L);
 332   1          TM1640_U_display(blank_L);
 333   1          TM1640_M_display(blank_L);
 334   1          ldelay();
 335   1      
 336   1          TM1640_UM_display(compny_name);
 337   1          ldelay();
 338   1      
 339   1          TM1640_digichk(digi_chk);
 340   1          ldelay();
 341   1      
 342   1          TM1640_L_display(blank_L);
 343   1          TM1640_U_display(blank_L);
 344   1          TM1640_M_display(blank_L);
 345   1          ldelay();
 346   1          ldelay();
 347   1      
 348   1          output = getNumberDisplayFloat(0, 5, 2);
 349   1          TM1640_M_display(output);
 350   1          TM1640_U_display(output);
 351   1          output = getNumberDisplayFloat(0, 6, precision);
 352   1          TM1640_L_display(output);
 353   1          loadPricesFromMemory();
 354   1          inputPrice[0] = '\0';
 355   1          mode = 1;
 356   1      }
C51 COMPILER V9.60.0.0   OM3                                                               10/03/2022 19:06:34 PAGE 7   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 46
                                           ; SOURCE LINE # 47
                                           ; SOURCE LINE # 48
0000 120000      R     LCALL   initializeDisplay
0003         ?C0001:
                                           ; SOURCE LINE # 49
                                           ; SOURCE LINE # 50
                                           ; SOURCE LINE # 51
0003 120000      E     LCALL   getWeight
0006 900000      R     MOV     DPTR,#weight
0009 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 52
000C 120000      E     LCALL   scan_keypad
000F 900000      R     MOV     DPTR,#key
0012 EF                MOV     A,R7
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 53
0014 7F0A              MOV     R7,#0AH
0016 7E00              MOV     R6,#00H
0018 120000      E     LCALL   _Delay_Some_Time
                                           ; SOURCE LINE # 54
001B 900000      R     MOV     DPTR,#key
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 6441              XRL     A,#041H
0022 7003              JNZ     $ + 5H
0024 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 55
0027 900000      R     MOV     DPTR,#mode
002A E0                MOVX    A,@DPTR
002B 7004              JNZ     ?C0074
002D A3                INC     DPTR
002E E0                MOVX    A,@DPTR
002F 6401              XRL     A,#01H
0031         ?C0074:
0031 7032              JNZ     ?C0004
                                           ; SOURCE LINE # 56
                                           ; SOURCE LINE # 57
0033 EF                MOV     A,R7
0034 6410              XRL     A,#010H
0036 7016              JNZ     ?C0005
                                           ; SOURCE LINE # 58
                                           ; SOURCE LINE # 60
0038 900000      R     MOV     DPTR,#mode
003B F0                MOVX    @DPTR,A
003C A3                INC     DPTR
003D 7402              MOV     A,#02H
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 62
0040 900000      R     MOV     DPTR,#savingTo
0043 7411              MOV     A,#011H
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 63
0046 120000      R     LCALL   clearPrice
                                           ; SOURCE LINE # 64
0049 120000      R     LCALL   displayPrice
                                           ; SOURCE LINE # 68
004C 80B5              SJMP    ?C0001
C51 COMPILER V9.60.0.0   OM3                                                               10/03/2022 19:06:34 PAGE 8   

                                           ; SOURCE LINE # 69
004E         ?C0005:
                                           ; SOURCE LINE # 70
004E 900000      R     MOV     DPTR,#key
0051 E0                MOVX    A,@DPTR
0052 D3                SETB    C
0053 9410              SUBB    A,#010H
0055 7480              MOV     A,#080H
0057 9480              SUBB    A,#080H
0059 4005              JC      ?C0006
                                           ; SOURCE LINE # 71
                                           ; SOURCE LINE # 72
005B 120000      R     LCALL   loadMemory
                                           ; SOURCE LINE # 73
005E 80A3              SJMP    ?C0001
                                           ; SOURCE LINE # 74
0060         ?C0006:
                                           ; SOURCE LINE # 75
0060 120000      R     LCALL   handleNumberInput
                                           ; SOURCE LINE # 76
                                           ; SOURCE LINE # 78
0063 8045              SJMP    ?C0092
0065         ?C0004:
0065 900000      R     MOV     DPTR,#mode
0068 E0                MOVX    A,@DPTR
0069 7004              JNZ     ?C0075
006B A3                INC     DPTR
006C E0                MOVX    A,@DPTR
006D 6402              XRL     A,#02H
006F         ?C0075:
006F 7005              JNZ     ?C0008
                                           ; SOURCE LINE # 79
                                           ; SOURCE LINE # 80
0071 120000      R     LCALL   handleNumberInput
                                           ; SOURCE LINE # 81
0074 8037              SJMP    ?C0003
0076         ?C0008:
0076 900000      R     MOV     DPTR,#mode
0079 E0                MOVX    A,@DPTR
007A 7004              JNZ     ?C0076
007C A3                INC     DPTR
007D E0                MOVX    A,@DPTR
007E 6403              XRL     A,#03H
0080         ?C0076:
0080 702B              JNZ     ?C0003
                                           ; SOURCE LINE # 82
                                           ; SOURCE LINE # 83
0082 900000      R     MOV     DPTR,#key
0085 E0                MOVX    A,@DPTR
0086 640B              XRL     A,#0BH
0088 7010              JNZ     ?C0011
                                           ; SOURCE LINE # 84
                                           ; SOURCE LINE # 85
008A 120000      R     LCALL   clearPrice
                                           ; SOURCE LINE # 86
008D 900000      R     MOV     DPTR,#mode
0090 E4                CLR     A
0091 F0                MOVX    @DPTR,A
0092 A3                INC     DPTR
0093 04                INC     A
0094 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 87
C51 COMPILER V9.60.0.0   OM3                                                               10/03/2022 19:06:34 PAGE 9   

0095 120000      R     LCALL   displayPrice
                                           ; SOURCE LINE # 88
0098 8010              SJMP    ?C0012
009A         ?C0011:
009A 900000      R     MOV     DPTR,#key
009D E0                MOVX    A,@DPTR
009E D3                SETB    C
009F 9410              SUBB    A,#010H
00A1 7480              MOV     A,#080H
00A3 9480              SUBB    A,#080H
00A5 4003              JC      ?C0012
                                           ; SOURCE LINE # 89
                                           ; SOURCE LINE # 90
00A7 120000      R     LCALL   loadMemory
                                           ; SOURCE LINE # 91
00AA         ?C0012:
                                           ; SOURCE LINE # 92
00AA         ?C0092:
00AA 120000      R     LCALL   displayWeight
                                           ; SOURCE LINE # 93
                                           ; SOURCE LINE # 96
00AD         ?C0003:
                                           ; SOURCE LINE # 97
00AD 7F0A              MOV     R7,#0AH
00AF 7E00              MOV     R6,#00H
00B1 120000      E     LCALL   _Delay_Some_Time
                                           ; SOURCE LINE # 98
00B4 020000      R     LJMP    ?C0001
             ; FUNCTION main (END)

             ; FUNCTION displayWeight (BEGIN)
                                           ; SOURCE LINE # 102
                                           ; SOURCE LINE # 103
                                           ; SOURCE LINE # 104
0000 900000      R     MOV     DPTR,#weight
0003 120000      R     LCALL   L?0098
0006 8B00        R     MOV     output,R3
0008 8A00        R     MOV     output+01H,R2
000A 8900        R     MOV     output+02H,R1
                                           ; SOURCE LINE # 105
000C 020000      E     LJMP    _TM1640_U_display
             ; FUNCTION displayWeight (END)

             ; FUNCTION loadMemory (BEGIN)
                                           ; SOURCE LINE # 108
                                           ; SOURCE LINE # 109
                                           ; SOURCE LINE # 111
0000 900000      R     MOV     DPTR,#key
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 120000      E     LCALL   _getPriceFromMemory
0008 8F00        R     MOV     x+03H,R7
000A 8E00        R     MOV     x+02H,R6
000C 8D00        R     MOV     x+01H,R5
000E 8C00        R     MOV     x,R4
                                           ; SOURCE LINE # 112
0010 E4                CLR     A
0011 FF                MOV     R7,A
0012 FE                MOV     R6,A
0013 7D80              MOV     R5,#080H
0015 7CBF              MOV     R4,#0BFH
0017 AB00        R     MOV     R3,x+03H
C51 COMPILER V9.60.0.0   OM3                                                               10/03/2022 19:06:34 PAGE 10  

0019 AA00        R     MOV     R2,x+02H
001B A900        R     MOV     R1,x+01H
001D A800        R     MOV     R0,x
001F 120000      E     LCALL   ?C?FPCMP3
0022 601A              JZ      ?C0017
                                           ; SOURCE LINE # 113
                                           ; SOURCE LINE # 115
0024 900000      R     MOV     DPTR,#mode
0027 E4                CLR     A
0028 F0                MOVX    @DPTR,A
0029 A3                INC     DPTR
002A 7403              MOV     A,#03H
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 116
002D AF00        R     MOV     R7,x+03H
002F AE00        R     MOV     R6,x+02H
0031 AD00        R     MOV     R5,x+01H
0033 AC00        R     MOV     R4,x
0035 900000      R     MOV     DPTR,#currentPrice
0038 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 117
003B 120000      R     LCALL   displayPrice
                                           ; SOURCE LINE # 118
                                           ; SOURCE LINE # 119
003E         ?C0017:
003E 22                RET     
             ; FUNCTION loadMemory (END)

             ; FUNCTION handleNumberInput (BEGIN)
                                           ; SOURCE LINE # 121
                                           ; SOURCE LINE # 122
                                           ; SOURCE LINE # 123
0000 900000      R     MOV     DPTR,#isDecimal
0003 E0                MOVX    A,@DPTR
0004 7004              JNZ     ?C0077
0006 A3                INC     DPTR
0007 E0                MOVX    A,@DPTR
0008 6401              XRL     A,#01H
000A         ?C0077:
000A 7012              JNZ     ?C0021
000C 7B01              MOV     R3,#01H
000E 7A00        R     MOV     R2,#HIGH inputPrice
0010 7900        R     MOV     R1,#LOW inputPrice
0012 120000      E     LCALL   _strlen
0015 C3                CLR     C
0016 EF                MOV     A,R7
0017 9406              SUBB    A,#06H
0019 EE                MOV     A,R6
001A 9400              SUBB    A,#00H
001C 4058              JC      ?C0020
001E         ?C0021:
001E 900000      R     MOV     DPTR,#isDecimal
0021 E0                MOVX    A,@DPTR
0022 7002              JNZ     ?C0078
0024 A3                INC     DPTR
0025 E0                MOVX    A,@DPTR
0026         ?C0078:
0026 7026              JNZ     ?C0022
0028 7B01              MOV     R3,#01H
002A 7A00        R     MOV     R2,#HIGH inputPrice
002C 7900        R     MOV     R1,#LOW inputPrice
002E 120000      E     LCALL   _strlen
C51 COMPILER V9.60.0.0   OM3                                                               10/03/2022 19:06:34 PAGE 11  

0031 900000      R     MOV     DPTR,#precision+01H
0034 E0                MOVX    A,@DPTR
0035 2F                ADD     A,R7
0036 FF                MOV     R7,A
0037 900000      R     MOV     DPTR,#precision
003A E0                MOVX    A,@DPTR
003B 3E                ADDC    A,R6
003C FE                MOV     R6,A
003D C3                CLR     C
003E EF                MOV     A,R7
003F 9406              SUBB    A,#06H
0041 EE                MOV     A,R6
0042 9400              SUBB    A,#00H
0044 5008              JNC     ?C0022
0046 900000      R     MOV     DPTR,#key
0049 E0                MOVX    A,@DPTR
004A 640A              XRL     A,#0AH
004C 6028              JZ      ?C0020
004E         ?C0022:
004E 900000      R     MOV     DPTR,#isDecimal
0051 E0                MOVX    A,@DPTR
0052 7002              JNZ     ?C0079
0054 A3                INC     DPTR
0055 E0                MOVX    A,@DPTR
0056         ?C0079:
0056 7024              JNZ     ?C0018
0058 7B01              MOV     R3,#01H
005A 7A00        R     MOV     R2,#HIGH inputPrice
005C 7900        R     MOV     R1,#LOW inputPrice
005E 120000      E     LCALL   _strlen
0061 900000      R     MOV     DPTR,#precision+01H
0064 E0                MOVX    A,@DPTR
0065 2F                ADD     A,R7
0066 FF                MOV     R7,A
0067 900000      R     MOV     DPTR,#precision
006A E0                MOVX    A,@DPTR
006B 3E                ADDC    A,R6
006C FE                MOV     R6,A
006D C3                CLR     C
006E EF                MOV     A,R7
006F 9405              SUBB    A,#05H
0071 EE                MOV     A,R6
0072 9400              SUBB    A,#00H
0074 5006              JNC     ?C0018
0076         ?C0020:
0076 7E00              MOV     R6,#00H
0078 7F00              MOV     R7,#00H
007A 8004              SJMP    ?C0019
007C         ?C0018:
007C 7E00              MOV     R6,#00H
007E 7F01              MOV     R7,#01H
0080         ?C0019:
0080 900000      R     MOV     DPTR,#isOverflow
0083 EE                MOV     A,R6
0084 F0                MOVX    @DPTR,A
0085 A3                INC     DPTR
0086 EF                MOV     A,R7
0087 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 124
0088 900000      R     MOV     DPTR,#key
008B E0                MOVX    A,@DPTR
008C FF                MOV     R7,A
C51 COMPILER V9.60.0.0   OM3                                                               10/03/2022 19:06:34 PAGE 12  

008D 7E00              MOV     R6,#00H
008F C3                CLR     C
0090 940B              SUBB    A,#0BH
0092 7480              MOV     A,#080H
0094 9480              SUBB    A,#080H
0096 500A              JNC     ?C0025
0098 900000      R     MOV     DPTR,#isOverflow
009B E0                MOVX    A,@DPTR
009C 7002              JNZ     ?C0080
009E A3                INC     DPTR
009F E0                MOVX    A,@DPTR
00A0         ?C0080:
00A0 6006              JZ      ?C0024
00A2         ?C0025:
00A2 EF                MOV     A,R7
00A3 640B              XRL     A,#0BH
00A5 4E                ORL     A,R6
00A6 7003              JNZ     ?C0026
00A8         ?C0024:
                                           ; SOURCE LINE # 125
                                           ; SOURCE LINE # 126
00A8 120000      R     LCALL   handleModeOne
                                           ; SOURCE LINE # 127
                                           ; SOURCE LINE # 128
00AB         ?C0026:
00AB 22                RET     
             ; FUNCTION handleNumberInput (END)

             ; FUNCTION handleModeOne (BEGIN)
                                           ; SOURCE LINE # 130
                                           ; SOURCE LINE # 131
                                           ; SOURCE LINE # 132
0000 900000      R     MOV     DPTR,#key
0003 E0                MOVX    A,@DPTR
0004 640B              XRL     A,#0BH
0006 7006              JNZ     ?C0027
                                           ; SOURCE LINE # 133
                                           ; SOURCE LINE # 134
0008 120000      R     LCALL   clearPrice
                                           ; SOURCE LINE # 135
000B 020000      R     LJMP    ?C0028
000E         ?C0027:
                                           ; SOURCE LINE # 136
000E 900000      R     MOV     DPTR,#key
0011 E0                MOVX    A,@DPTR
0012 C3                CLR     C
0013 940A              SUBB    A,#0AH
0015 7480              MOV     A,#080H
0017 9480              SUBB    A,#080H
0019 500D              JNC     ?C0029
001B 900000      R     MOV     DPTR,#isDecimal
001E E0                MOVX    A,@DPTR
001F 7002              JNZ     ?C0081
0021 A3                INC     DPTR
0022 E0                MOVX    A,@DPTR
0023         ?C0081:
0023 7003              JNZ     ?C0029
                                           ; SOURCE LINE # 137
                                           ; SOURCE LINE # 138
                                           ; SOURCE LINE # 139
0025 020000      R     LJMP    ?C0093
0028         ?C0029:
C51 COMPILER V9.60.0.0   OM3                                                               10/03/2022 19:06:34 PAGE 13  

                                           ; SOURCE LINE # 140
0028 900000      R     MOV     DPTR,#key
002B E0                MOVX    A,@DPTR
002C FF                MOV     R7,A
002D 7E00              MOV     R6,#00H
002F 640A              XRL     A,#0AH
0031 7012              JNZ     ?C0031
0033 900000      R     MOV     DPTR,#isDecimal
0036 E0                MOVX    A,@DPTR
0037 7002              JNZ     ?C0082
0039 A3                INC     DPTR
003A E0                MOVX    A,@DPTR
003B         ?C0082:
003B 7008              JNZ     ?C0031
                                           ; SOURCE LINE # 141
                                           ; SOURCE LINE # 142
003D 900000      R     MOV     DPTR,#isDecimal
0040 F0                MOVX    @DPTR,A
0041 A3                INC     DPTR
0042 04                INC     A
0043 F0                MOVX    @DPTR,A
0044 22                RET     
                                           ; SOURCE LINE # 144
0045         ?C0031:
                                           ; SOURCE LINE # 145
0045 C3                CLR     C
0046 EF                MOV     A,R7
0047 940A              SUBB    A,#0AH
0049 EE                MOV     A,R6
004A 6480              XRL     A,#080H
004C 9480              SUBB    A,#080H
004E 5063              JNC     ?C0034
0050 900000      R     MOV     DPTR,#isDecimal
0053 E0                MOVX    A,@DPTR
0054 7004              JNZ     ?C0083
0056 A3                INC     DPTR
0057 E0                MOVX    A,@DPTR
0058 6401              XRL     A,#01H
005A         ?C0083:
005A 7057              JNZ     ?C0034
005C 900000      R     MOV     DPTR,#afterDecimal
005F E0                MOVX    A,@DPTR
0060 7002              JNZ     ?C0084
0062 A3                INC     DPTR
0063 E0                MOVX    A,@DPTR
0064         ?C0084:
0064 704D              JNZ     ?C0034
                                           ; SOURCE LINE # 146
                                           ; SOURCE LINE # 148
0066 900000      R     MOV     DPTR,#temp
0069 742E              MOV     A,#02EH
006B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 149
006C 750001      E     MOV     ?_joinCharacter?BYTE+03H,#01H
006F 750000      R     MOV     ?_joinCharacter?BYTE+04H,#HIGH temp
0072 750000      R     MOV     ?_joinCharacter?BYTE+05H,#LOW temp
0075 7B01              MOV     R3,#01H
0077 7A00        R     MOV     R2,#HIGH inputPrice
0079 7900        R     MOV     R1,#LOW inputPrice
007B 120000      E     LCALL   _joinCharacter
                                           ; SOURCE LINE # 150
007E 900000      R     MOV     DPTR,#key
C51 COMPILER V9.60.0.0   OM3                                                               10/03/2022 19:06:34 PAGE 14  

0081 E0                MOVX    A,@DPTR
0082 4430              ORL     A,#030H
0084 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 151
0085 900000      R     MOV     DPTR,#temp
0088 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 152
0089 750001      E     MOV     ?_joinCharacter?BYTE+03H,#01H
008C 750000      R     MOV     ?_joinCharacter?BYTE+04H,#HIGH temp
008F 750000      R     MOV     ?_joinCharacter?BYTE+05H,#LOW temp
0092 7B01              MOV     R3,#01H
0094 7A00        R     MOV     R2,#HIGH inputPrice
0096 7900        R     MOV     R1,#LOW inputPrice
0098 120000      E     LCALL   _joinCharacter
                                           ; SOURCE LINE # 153
009B 900000      R     MOV     DPTR,#afterDecimal
009E E4                CLR     A
009F F0                MOVX    @DPTR,A
00A0 A3                INC     DPTR
00A1 04                INC     A
00A2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 154
00A3 FB                MOV     R3,A
00A4 7A00        R     MOV     R2,#HIGH inputPrice
00A6 7900        R     MOV     R1,#LOW inputPrice
00A8 120000      E     LCALL   _atof
00AB 900000      R     MOV     DPTR,#currentPrice
00AE 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 155
00B1 8028              SJMP    ?C0028
00B3         ?C0034:
                                           ; SOURCE LINE # 156
00B3 900000      R     MOV     DPTR,#key
00B6 E0                MOVX    A,@DPTR
00B7 C3                CLR     C
00B8 940A              SUBB    A,#0AH
00BA 7480              MOV     A,#080H
00BC 9480              SUBB    A,#080H
00BE 501B              JNC     ?C0028
00C0 900000      R     MOV     DPTR,#isDecimal
00C3 E0                MOVX    A,@DPTR
00C4 7004              JNZ     ?C0085
00C6 A3                INC     DPTR
00C7 E0                MOVX    A,@DPTR
00C8 6401              XRL     A,#01H
00CA         ?C0085:
00CA 700F              JNZ     ?C0028
00CC 900000      R     MOV     DPTR,#afterDecimal
00CF E0                MOVX    A,@DPTR
00D0 7004              JNZ     ?C0086
00D2 A3                INC     DPTR
00D3 E0                MOVX    A,@DPTR
00D4 6401              XRL     A,#01H
00D6         ?C0086:
00D6 7003              JNZ     ?C0028
                                           ; SOURCE LINE # 157
                                           ; SOURCE LINE # 158
00D8         ?C0093:
00D8 120000      R     LCALL   addToInputPrice
                                           ; SOURCE LINE # 159
00DB         ?C0028:
                                           ; SOURCE LINE # 160
C51 COMPILER V9.60.0.0   OM3                                                               10/03/2022 19:06:34 PAGE 15  

00DB 120000      R     LCALL   displayPrice
                                           ; SOURCE LINE # 161
00DE         ?C0032:
00DE 22                RET     
             ; FUNCTION handleModeOne (END)

             ; FUNCTION clearPrice (BEGIN)
                                           ; SOURCE LINE # 163
                                           ; SOURCE LINE # 164
                                           ; SOURCE LINE # 165
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#inputPrice
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 166
0005 900000      R     MOV     DPTR,#isDecimal
0008 F0                MOVX    @DPTR,A
0009 A3                INC     DPTR
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 167
000B 900000      R     MOV     DPTR,#afterDecimal
000E F0                MOVX    @DPTR,A
000F A3                INC     DPTR
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 168
0011 900000      R     MOV     DPTR,#currentPrice
0014 120000      E     LCALL   ?C?LSTKXDATA
0017 00                DB      00H
0018 00                DB      00H
0019 00                DB      00H
001A 00                DB      00H
                                           ; SOURCE LINE # 169
001B 22                RET     
             ; FUNCTION clearPrice (END)

             ; FUNCTION addToInputPrice (BEGIN)
                                           ; SOURCE LINE # 171
                                           ; SOURCE LINE # 172
                                           ; SOURCE LINE # 173
0000 900000      R     MOV     DPTR,#key
0003 E0                MOVX    A,@DPTR
0004 4430              ORL     A,#030H
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 174
0007 900000      R     MOV     DPTR,#temp
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 175
000B 750001      E     MOV     ?_joinCharacter?BYTE+03H,#01H
000E 750000      R     MOV     ?_joinCharacter?BYTE+04H,#HIGH temp
0011 750000      R     MOV     ?_joinCharacter?BYTE+05H,#LOW temp
0014 7B01              MOV     R3,#01H
0016 7A00        R     MOV     R2,#HIGH inputPrice
0018 7900        R     MOV     R1,#LOW inputPrice
001A 120000      E     LCALL   _joinCharacter
                                           ; SOURCE LINE # 176
001D 7B01              MOV     R3,#01H
001F 7A00        R     MOV     R2,#HIGH inputPrice
0021 7900        R     MOV     R1,#LOW inputPrice
0023 120000      E     LCALL   _atof
0026 900000      R     MOV     DPTR,#currentPrice
0029 020000      E     LJMP    ?C?LSTXDATA
             ; FUNCTION addToInputPrice (END)

C51 COMPILER V9.60.0.0   OM3                                                               10/03/2022 19:06:34 PAGE 16  

             ; FUNCTION displayPrice (BEGIN)
                                           ; SOURCE LINE # 179
                                           ; SOURCE LINE # 180
                                           ; SOURCE LINE # 181
0000 900000      R     MOV     DPTR,#weight
0003 120000      E     LCALL   ?C?LLDXDATA
0006 900000      R     MOV     DPTR,#currentPrice
0009 120000      E     LCALL   ?C?LLDXDATA0
000C 120000      E     LCALL   ?C?FPMUL
000F 900000      R     MOV     DPTR,#total
0012 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 182
0015 900000      R     MOV     DPTR,#currentPrice
0018 120000      R     LCALL   L?0098
001B 8B00        R     MOV     output,R3
001D 8A00        R     MOV     output+01H,R2
001F 8900        R     MOV     output+02H,R1
                                           ; SOURCE LINE # 183
0021 120000      E     LCALL   _TM1640_M_display
                                           ; SOURCE LINE # 184
0024 900000      R     MOV     DPTR,#total
0027 120000      E     LCALL   ?C?LLDXDATA
002A 750000      R     MOV     ?_getNumberDisplayFloat?BYTE+04H,#00H
002D 750006      R     MOV     ?_getNumberDisplayFloat?BYTE+05H,#06H
0030 120000      R     LCALL   L?0099
0033 8B00        R     MOV     output,R3
0035 8A00        R     MOV     output+01H,R2
0037 8900        R     MOV     output+02H,R1
                                           ; SOURCE LINE # 185
0039 020000      E     LJMP    _TM1640_L_display
             ; FUNCTION displayPrice (END)

             ; FUNCTION Keypad_GPIO_Config (BEGIN)
                                           ; SOURCE LINE # 188
                                           ; SOURCE LINE # 189
                                           ; SOURCE LINE # 190
0000 75911F            MOV     P1M0,#01FH
                                           ; SOURCE LINE # 191
0003 D2A2              SETB    P22
                                           ; SOURCE LINE # 192
0005 D2A4              SETB    P24
                                           ; SOURCE LINE # 193
0007 D2A6              SETB    P26
                                           ; SOURCE LINE # 194
0009 D296              SETB    P16
                                           ; SOURCE LINE # 195
000B D295              SETB    P15
                                           ; SOURCE LINE # 196
000D C290              CLR     P10
                                           ; SOURCE LINE # 197
000F C291              CLR     P11
                                           ; SOURCE LINE # 198
0011 C292              CLR     P12
                                           ; SOURCE LINE # 199
0013 C293              CLR     P13
                                           ; SOURCE LINE # 200
0015 C294              CLR     P14
                                           ; SOURCE LINE # 202
0017 22                RET     
             ; FUNCTION Keypad_GPIO_Config (END)

             ; FUNCTION L?0098 (BEGIN)
C51 COMPILER V9.60.0.0   OM3                                                               10/03/2022 19:06:34 PAGE 17  

0000 120000      E     LCALL   ?C?LLDXDATA
0003 750000      R     MOV     ?_getNumberDisplayFloat?BYTE+04H,#00H
0006 750005      R     MOV     ?_getNumberDisplayFloat?BYTE+05H,#05H
0009         L?0099:
0009 900000      R     MOV     DPTR,#precision
000C E0                MOVX    A,@DPTR
000D F500        R     MOV     ?_getNumberDisplayFloat?BYTE+06H,A
000F A3                INC     DPTR
0010 E0                MOVX    A,@DPTR
0011 F500        R     MOV     ?_getNumberDisplayFloat?BYTE+07H,A
             ; FUNCTION _getNumberDisplayFloat (BEGIN)
                                           ; SOURCE LINE # 204
0013 8F00        R     MOV     x+03H,R7
0015 8E00        R     MOV     x+02H,R6
0017 8D00        R     MOV     x+01H,R5
0019 8C00        R     MOV     x,R4
                                           ; SOURCE LINE # 205
                                           ; SOURCE LINE # 208
001B E4                CLR     A
001C F500        R     MOV     value_len,A
001E F500        R     MOV     value_len+01H,A
                                           ; SOURCE LINE # 209
0020 F500        R     MOV     set_flag,A
0022 F500        R     MOV     set_flag+01H,A
                                           ; SOURCE LINE # 210
0024 F500        R     MOV     after_display,A
0026 F500        R     MOV     after_display+01H,A
                                           ; SOURCE LINE # 213
0028 E500        R     MOV     A,precision+01H
002A 4500        R     ORL     A,precision
002C 7013              JNZ     ?C0041
                                           ; SOURCE LINE # 214
                                           ; SOURCE LINE # 215
002E 7500FF      E     MOV     ?_sprintf?BYTE+03H,#0FFH
0031 750000      R     MOV     ?_sprintf?BYTE+04H,#HIGH ?SC_0
0034 750000      R     MOV     ?_sprintf?BYTE+05H,#LOW ?SC_0
0037 8F00        E     MOV     ?_sprintf?BYTE+09H,R7
0039 8E00        E     MOV     ?_sprintf?BYTE+08H,R6
003B 8D00        E     MOV     ?_sprintf?BYTE+07H,R5
003D 8C00        E     MOV     ?_sprintf?BYTE+06H,R4
                                           ; SOURCE LINE # 216
003F 805B              SJMP    ?C0096
0041         ?C0041:
                                           ; SOURCE LINE # 217
0041 E500        R     MOV     A,precision+01H
0043 6401              XRL     A,#01H
0045 4500        R     ORL     A,precision
0047 7017              JNZ     ?C0043
                                           ; SOURCE LINE # 218
                                           ; SOURCE LINE # 219
0049 7500FF      E     MOV     ?_sprintf?BYTE+03H,#0FFH
004C 750000      R     MOV     ?_sprintf?BYTE+04H,#HIGH ?SC_5
004F 750000      R     MOV     ?_sprintf?BYTE+05H,#LOW ?SC_5
0052 850000      E     MOV     ?_sprintf?BYTE+09H,x+03H
0055 850000      E     MOV     ?_sprintf?BYTE+08H,x+02H
0058 850000      E     MOV     ?_sprintf?BYTE+07H,x+01H
005B 850000      E     MOV     ?_sprintf?BYTE+06H,x
005E         ?C0094:
                                           ; SOURCE LINE # 220
005E 803C              SJMP    ?C0096
0060         ?C0043:
                                           ; SOURCE LINE # 221
C51 COMPILER V9.60.0.0   OM3                                                               10/03/2022 19:06:34 PAGE 18  

0060 E500        R     MOV     A,precision+01H
0062 6402              XRL     A,#02H
0064 4500        R     ORL     A,precision
0066 7017              JNZ     ?C0045
                                           ; SOURCE LINE # 222
                                           ; SOURCE LINE # 223
0068 7500FF      E     MOV     ?_sprintf?BYTE+03H,#0FFH
006B 750000      R     MOV     ?_sprintf?BYTE+04H,#HIGH ?SC_10
006E 750000      R     MOV     ?_sprintf?BYTE+05H,#LOW ?SC_10
0071 850000      E     MOV     ?_sprintf?BYTE+09H,x+03H
0074 850000      E     MOV     ?_sprintf?BYTE+08H,x+02H
0077 850000      E     MOV     ?_sprintf?BYTE+07H,x+01H
007A 850000      E     MOV     ?_sprintf?BYTE+06H,x
007D         ?C0095:
                                           ; SOURCE LINE # 224
007D 801D              SJMP    ?C0096
007F         ?C0045:
                                           ; SOURCE LINE # 225
007F E500        R     MOV     A,precision+01H
0081 6403              XRL     A,#03H
0083 4500        R     ORL     A,precision
0085 701D              JNZ     ?C0042
                                           ; SOURCE LINE # 226
                                           ; SOURCE LINE # 227
0087 7500FF      E     MOV     ?_sprintf?BYTE+03H,#0FFH
008A 750000      R     MOV     ?_sprintf?BYTE+04H,#HIGH ?SC_15
008D 750000      R     MOV     ?_sprintf?BYTE+05H,#LOW ?SC_15
0090 850000      E     MOV     ?_sprintf?BYTE+09H,x+03H
0093 850000      E     MOV     ?_sprintf?BYTE+08H,x+02H
0096 850000      E     MOV     ?_sprintf?BYTE+07H,x+01H
0099 850000      E     MOV     ?_sprintf?BYTE+06H,x
009C         ?C0096:
009C FB                MOV     R3,A
009D 7A00        R     MOV     R2,#HIGH value
009F 7900        R     MOV     R1,#LOW value
00A1 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 228
00A4         ?C0042:
                                           ; SOURCE LINE # 229
00A4 E4                CLR     A
00A5 F500        R     MOV     i,A
00A7 F500        R     MOV     i+01H,A
00A9         ?C0048:
00A9 7B00              MOV     R3,#00H
00AB 7A00        R     MOV     R2,#HIGH value
00AD 7900        R     MOV     R1,#LOW value
00AF 120000      E     LCALL   _strlen
00B2 C3                CLR     C
00B3 E500        R     MOV     A,i+01H
00B5 9F                SUBB    A,R7
00B6 E500        R     MOV     A,i
00B8 9E                SUBB    A,R6
00B9 501C              JNC     ?C0049
                                           ; SOURCE LINE # 230
                                           ; SOURCE LINE # 231
00BB 7400        R     MOV     A,#LOW value
00BD 2500        R     ADD     A,i+01H
00BF F8                MOV     R0,A
00C0 E6                MOV     A,@R0
00C1 642E              XRL     A,#02EH
00C3 6012              JZ      ?C0049
                                           ; SOURCE LINE # 232
C51 COMPILER V9.60.0.0   OM3                                                               10/03/2022 19:06:34 PAGE 19  

                                           ; SOURCE LINE # 233
                                           ; SOURCE LINE # 234
                                           ; SOURCE LINE # 235
00C5 0500        R     INC     value_len+01H
00C7 E500        R     MOV     A,value_len+01H
00C9 7002              JNZ     ?C0087
00CB 0500        R     INC     value_len
00CD         ?C0087:
                                           ; SOURCE LINE # 236
                                           ; SOURCE LINE # 237
00CD 0500        R     INC     i+01H
00CF E500        R     MOV     A,i+01H
00D1 70D6              JNZ     ?C0048
00D3 0500        R     INC     i
00D5         ?C0088:
00D5 80D2              SJMP    ?C0048
00D7         ?C0049:
                                           ; SOURCE LINE # 238
00D7 E500        R     MOV     A,value_len+01H
00D9 2500        R     ADD     A,precision+01H
00DB FF                MOV     R7,A
00DC E500        R     MOV     A,value_len
00DE 3500        R     ADDC    A,precision
00E0 FE                MOV     R6,A
00E1 D3                SETB    C
00E2 EF                MOV     A,R7
00E3 9500        R     SUBB    A,displayLength+01H
00E5 E500        R     MOV     A,displayLength
00E7 6480              XRL     A,#080H
00E9 F8                MOV     R0,A
00EA EE                MOV     A,R6
00EB 6480              XRL     A,#080H
00ED 98                SUBB    A,R0
00EE 4007              JC      ?C0053
                                           ; SOURCE LINE # 239
                                           ; SOURCE LINE # 241
00F0 7B01              MOV     R3,#01H
00F2 7A00        R     MOV     R2,#HIGH overflowHex
00F4 7900        R     MOV     R1,#LOW overflowHex
00F6 22                RET     
                                           ; SOURCE LINE # 242
00F7         ?C0053:
                                           ; SOURCE LINE # 244
00F7 7B00              MOV     R3,#00H
00F9 7A00        R     MOV     R2,#HIGH value
00FB 7900        R     MOV     R1,#LOW value
00FD 120000      E     LCALL   _strlen
0100 EF                MOV     A,R7
0101 24FF              ADD     A,#0FFH
0103 F500        R     MOV     i+01H,A
0105 EE                MOV     A,R6
0106 34FF              ADDC    A,#0FFH
0108 F500        R     MOV     i,A
010A         ?C0055:
010A D3                SETB    C
010B E500        R     MOV     A,i+01H
010D 94FF              SUBB    A,#0FFH
010F E500        R     MOV     A,i
0111 6480              XRL     A,#080H
0113 947F              SUBB    A,#07FH
0115 4031              JC      ?C0056
                                           ; SOURCE LINE # 245
C51 COMPILER V9.60.0.0   OM3                                                               10/03/2022 19:06:34 PAGE 20  

                                           ; SOURCE LINE # 246
0117 7B00              MOV     R3,#00H
0119 7A00        R     MOV     R2,#HIGH value
011B 7900        R     MOV     R1,#LOW value
011D 120000      E     LCALL   _strlen
0120 EF                MOV     A,R7
0121 24FF              ADD     A,#0FFH
0123 FF                MOV     R7,A
0124 EE                MOV     A,R6
0125 34FF              ADDC    A,#0FFH
0127 FE                MOV     R6,A
0128 C3                CLR     C
0129 EF                MOV     A,R7
012A 9500        R     SUBB    A,i+01H
012C FF                MOV     R7,A
012D EE                MOV     A,R6
012E 9500        R     SUBB    A,i
0130 FE                MOV     R6,A
;---- Variable 'y' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 247
0131 7400        R     MOV     A,#LOW value
0133 2500        R     ADD     A,i+01H
0135 F8                MOV     R0,A
0136 E6                MOV     A,@R0
0137 FD                MOV     R5,A
0138 7400        R     MOV     A,#LOW t
013A 2F                ADD     A,R7
013B F8                MOV     R0,A
013C A605              MOV     @R0,AR5
                                           ; SOURCE LINE # 248
013E E500        R     MOV     A,i+01H
0140 1500        R     DEC     i+01H
0142 70C6              JNZ     ?C0055
0144 1500        R     DEC     i
0146         ?C0089:
0146 80C2              SJMP    ?C0055
0148         ?C0056:
                                           ; SOURCE LINE # 249
0148 7B00              MOV     R3,#00H
014A 7A00        R     MOV     R2,#HIGH value
014C 7900        R     MOV     R1,#LOW value
014E 120000      E     LCALL   _strlen
0151 7400        R     MOV     A,#LOW t
0153 2F                ADD     A,R7
0154 F8                MOV     R0,A
0155 E4                CLR     A
0156 F6                MOV     @R0,A
                                           ; SOURCE LINE # 250
0157 F500        R     MOV     i,A
0159 F500        R     MOV     i+01H,A
015B         ?C0058:
015B C3                CLR     C
015C E500        R     MOV     A,i+01H
015E 9500        R     SUBB    A,displayLength+01H
0160 E500        R     MOV     A,displayLength
0162 6480              XRL     A,#080H
0164 F8                MOV     R0,A
0165 E500        R     MOV     A,i
0167 6480              XRL     A,#080H
0169 98                SUBB    A,R0
016A 5018              JNC     ?C0059
                                           ; SOURCE LINE # 251
C51 COMPILER V9.60.0.0   OM3                                                               10/03/2022 19:06:34 PAGE 21  

                                           ; SOURCE LINE # 252
016C 7400        R     MOV     A,#LOW final_display
016E 2500        R     ADD     A,i+01H
0170 F582              MOV     DPL,A
0172 7400        R     MOV     A,#HIGH final_display
0174 3500        R     ADDC    A,i
0176 F583              MOV     DPH,A
0178 E4                CLR     A
0179 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 253
017A 0500        R     INC     i+01H
017C E500        R     MOV     A,i+01H
017E 70DB              JNZ     ?C0058
0180 0500        R     INC     i
0182         ?C0090:
0182 80D7              SJMP    ?C0058
0184         ?C0059:
                                           ; SOURCE LINE # 254
0184 E4                CLR     A
0185 F500        R     MOV     i,A
0187 F500        R     MOV     i+01H,A
0189         ?C0061:
0189 7B00              MOV     R3,#00H
018B 7A00        R     MOV     R2,#HIGH t
018D 7900        R     MOV     R1,#LOW t
018F 120000      E     LCALL   _strlen
0192 C3                CLR     C
0193 E500        R     MOV     A,i+01H
0195 9F                SUBB    A,R7
0196 E500        R     MOV     A,i
0198 9E                SUBB    A,R6
0199 5073              JNC     ?C0062
                                           ; SOURCE LINE # 255
                                           ; SOURCE LINE # 256
019B 7400        R     MOV     A,#LOW t
019D 2500        R     ADD     A,i+01H
019F F8                MOV     R0,A
01A0 E6                MOV     A,@R0
01A1 FF                MOV     R7,A
01A2 B42E0E            CJNE    A,#02EH,?C0064
                                           ; SOURCE LINE # 257
                                           ; SOURCE LINE # 258
01A5 750000      R     MOV     set_flag,#00H
01A8 750001      R     MOV     set_flag+01H,#01H
                                           ; SOURCE LINE # 259
01AB 750000      R     MOV     after_display,#00H
01AE 750001      R     MOV     after_display+01H,#01H
                                           ; SOURCE LINE # 260
01B1 8050              SJMP    ?C0063
                                           ; SOURCE LINE # 261
01B3         ?C0064:
                                           ; SOURCE LINE # 262
01B3 EF                MOV     A,R7
01B4 540F              ANL     A,#0FH
01B6 7E00              MOV     R6,#00H
;---- Variable 'index' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 263
01B8 2400        R     ADD     A,#LOW no_digits
01BA F582              MOV     DPL,A
01BC EE                MOV     A,R6
01BD 3400        R     ADDC    A,#HIGH no_digits
01BF F583              MOV     DPH,A
C51 COMPILER V9.60.0.0   OM3                                                               10/03/2022 19:06:34 PAGE 22  

01C1 E0                MOVX    A,@DPTR
01C2 FF                MOV     R7,A
;---- Variable 'a' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 264
01C3 E500        R     MOV     A,after_display+01H
01C5 6401              XRL     A,#01H
01C7 4500        R     ORL     A,after_display
01C9 702A              JNZ     ?C0065
                                           ; SOURCE LINE # 265
                                           ; SOURCE LINE # 266
01CB E500        R     MOV     A,set_flag+01H
01CD 6401              XRL     A,#01H
01CF 4500        R     ORL     A,set_flag
01D1 7018              JNZ     ?C0066
                                           ; SOURCE LINE # 267
                                           ; SOURCE LINE # 268
01D3 430702            ORL     AR7,#02H
                                           ; SOURCE LINE # 269
01D6 7400        R     MOV     A,#LOW final_display+0FFFFH
01D8 2500        R     ADD     A,i+01H
01DA F582              MOV     DPL,A
01DC 7400        R     MOV     A,#HIGH final_display+0FFFFH
01DE 3500        R     ADDC    A,i
01E0 F583              MOV     DPH,A
01E2 EF                MOV     A,R7
01E3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 270
01E4 E4                CLR     A
01E5 F500        R     MOV     set_flag,A
01E7 F500        R     MOV     set_flag+01H,A
                                           ; SOURCE LINE # 271
01E9 8018              SJMP    ?C0063
01EB         ?C0066:
                                           ; SOURCE LINE # 273
                                           ; SOURCE LINE # 274
01EB 7400        R     MOV     A,#LOW final_display+0FFFFH
01ED 2500        R     ADD     A,i+01H
01EF F582              MOV     DPL,A
01F1 7400        R     MOV     A,#HIGH final_display+0FFFFH
                                           ; SOURCE LINE # 275
                                           ; SOURCE LINE # 276
01F3 8008              SJMP    ?C0097
01F5         ?C0065:
                                           ; SOURCE LINE # 278
                                           ; SOURCE LINE # 279
01F5 7400        R     MOV     A,#LOW final_display
01F7 2500        R     ADD     A,i+01H
01F9 F582              MOV     DPL,A
01FB 7400        R     MOV     A,#HIGH final_display
01FD         ?C0097:
01FD 3500        R     ADDC    A,i
01FF F583              MOV     DPH,A
0201 EF                MOV     A,R7
0202 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 280
                                           ; SOURCE LINE # 282
0203         ?C0063:
0203 0500        R     INC     i+01H
0205 E500        R     MOV     A,i+01H
0207 7002              JNZ     ?C0091
0209 0500        R     INC     i
020B         ?C0091:
C51 COMPILER V9.60.0.0   OM3                                                               10/03/2022 19:06:34 PAGE 23  

020B 020000      R     LJMP    ?C0061
020E         ?C0062:
                                           ; SOURCE LINE # 283
020E 7B01              MOV     R3,#01H
0210 7A00        R     MOV     R2,#HIGH final_display
0212 7900        R     MOV     R1,#LOW final_display
                                           ; SOURCE LINE # 284
0214         ?C0054:
0214 22                RET     
             ; FUNCTION _getNumberDisplayFloat (END)

             ; FUNCTION key_display (BEGIN)
                                           ; SOURCE LINE # 286
                                           ; SOURCE LINE # 287
                                           ; SOURCE LINE # 289
0000 900000      R     MOV     DPTR,#lo_key_no
0003 E0                MOVX    A,@DPTR
0004 F500        R     MOV     temp,A
                                           ; SOURCE LINE # 290
0006 900000      R     MOV     DPTR,#hi_key_no
0009 E0                MOVX    A,@DPTR
000A F500        R     MOV     temp+01H,A
                                           ; SOURCE LINE # 291
000C E4                CLR     A
000D F500        R     MOV     temp+02H,A
                                           ; SOURCE LINE # 292
000F F500        R     MOV     temp+03H,A
                                           ; SOURCE LINE # 293
0011 F500        R     MOV     temp+04H,A
                                           ; SOURCE LINE # 294
0013 F500        R     MOV     temp+05H,A
                                           ; SOURCE LINE # 295
0015 FB                MOV     R3,A
0016 7A00        R     MOV     R2,#HIGH temp
0018 7900        R     MOV     R1,#LOW temp
001A 020000      E     LJMP    _TM1640_L_display
             ; FUNCTION key_display (END)

             ; FUNCTION _key_sort (BEGIN)
                                           ; SOURCE LINE # 298
;---- Variable 'temp_key' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 299
                                           ; SOURCE LINE # 300
0000 EF                MOV     A,R7
0001 C3                CLR     C
0002 940A              SUBB    A,#0AH
0004 7480              MOV     A,#080H
0006 9480              SUBB    A,#080H
0008 500A              JNC     ?C0070
                                           ; SOURCE LINE # 301
                                           ; SOURCE LINE # 302
000A E4                CLR     A
000B 900000      R     MOV     DPTR,#hi_key_no
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 303
000F A3                INC     DPTR
0010 EF                MOV     A,R7
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 304
0012 8012              SJMP    ?C0071
0014         ?C0070:
                                           ; SOURCE LINE # 306
C51 COMPILER V9.60.0.0   OM3                                                               10/03/2022 19:06:34 PAGE 24  

                                           ; SOURCE LINE # 307
0014 EF                MOV     A,R7
0015 75F00A            MOV     B,#0AH
0018 84                DIV     AB
0019 900000      R     MOV     DPTR,#hi_key_no
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 308
001D EF                MOV     A,R7
001E 75F00A            MOV     B,#0AH
0021 84                DIV     AB
0022 A3                INC     DPTR
0023 E5F0              MOV     A,B
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 309
0026         ?C0071:
                                           ; SOURCE LINE # 310
0026 900000      R     MOV     DPTR,#hi_key_no
0029 E0                MOVX    A,@DPTR
002A 2400        R     ADD     A,#LOW no_digits
002C F582              MOV     DPL,A
002E E4                CLR     A
002F 3400        R     ADDC    A,#HIGH no_digits
0031 F583              MOV     DPH,A
0033 E0                MOVX    A,@DPTR
0034 900000      R     MOV     DPTR,#hi_key_no
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 311
0038 A3                INC     DPTR
0039 E0                MOVX    A,@DPTR
003A 2400        R     ADD     A,#LOW no_digits
003C F582              MOV     DPL,A
003E E4                CLR     A
003F 3400        R     ADDC    A,#HIGH no_digits
0041 F583              MOV     DPH,A
0043 E0                MOVX    A,@DPTR
0044 900000      R     MOV     DPTR,#lo_key_no
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 312
0048 22                RET     
             ; FUNCTION _key_sort (END)

             ; FUNCTION initializeDisplay (BEGIN)
                                           ; SOURCE LINE # 314
                                           ; SOURCE LINE # 315
                                           ; SOURCE LINE # 316
0000 120000      E     LCALL   TM1640_GPIO_Config
                                           ; SOURCE LINE # 317
0003 120000      R     LCALL   Keypad_GPIO_Config
                                           ; SOURCE LINE # 318
0006 E4                CLR     A
0007 FF                MOV     R7,A
0008 120000      E     LCALL   _TM1640_Init
                                           ; SOURCE LINE # 319
000B 7F0A              MOV     R7,#0AH
000D 7E00              MOV     R6,#00H
000F 120000      E     LCALL   _Delay_Some_Time
                                           ; SOURCE LINE # 321
0012 7B01              MOV     R3,#01H
0014 7A00        R     MOV     R2,#HIGH blank_L
0016 7900        R     MOV     R1,#LOW blank_L
0018 120000      E     LCALL   _TM1640_U_display
                                           ; SOURCE LINE # 322
C51 COMPILER V9.60.0.0   OM3                                                               10/03/2022 19:06:34 PAGE 25  

001B 7B01              MOV     R3,#01H
001D 7A00        R     MOV     R2,#HIGH blank_L
001F 7900        R     MOV     R1,#LOW blank_L
0021 120000      E     LCALL   _TM1640_M_display
                                           ; SOURCE LINE # 323
0024 7B01              MOV     R3,#01H
0026 7A00        R     MOV     R2,#HIGH blank_L
0028 7900        R     MOV     R1,#LOW blank_L
002A 120000      E     LCALL   _TM1640_L_display
                                           ; SOURCE LINE # 325
002D 7B01              MOV     R3,#01H
002F 7A00        R     MOV     R2,#HIGH prc
0031 7900        R     MOV     R1,#LOW prc
0033 120000      E     LCALL   _TM1640_U_display
                                           ; SOURCE LINE # 326
0036 120000      E     LCALL   ldelay
                                           ; SOURCE LINE # 328
0039 7B01              MOV     R3,#01H
003B 7A00        R     MOV     R2,#HIGH ver
003D 7900        R     MOV     R1,#LOW ver
003F 120000      E     LCALL   _TM1640_L_display
                                           ; SOURCE LINE # 329
0042 120000      E     LCALL   ldelay
                                           ; SOURCE LINE # 331
0045 7B01              MOV     R3,#01H
0047 7A00        R     MOV     R2,#HIGH blank_L
0049 7900        R     MOV     R1,#LOW blank_L
004B 120000      E     LCALL   _TM1640_L_display
                                           ; SOURCE LINE # 332
004E 7B01              MOV     R3,#01H
0050 7A00        R     MOV     R2,#HIGH blank_L
0052 7900        R     MOV     R1,#LOW blank_L
0054 120000      E     LCALL   _TM1640_U_display
                                           ; SOURCE LINE # 333
0057 7B01              MOV     R3,#01H
0059 7A00        R     MOV     R2,#HIGH blank_L
005B 7900        R     MOV     R1,#LOW blank_L
005D 120000      E     LCALL   _TM1640_M_display
                                           ; SOURCE LINE # 334
0060 120000      E     LCALL   ldelay
                                           ; SOURCE LINE # 336
0063 7B01              MOV     R3,#01H
0065 7A00        R     MOV     R2,#HIGH compny_name
0067 7900        R     MOV     R1,#LOW compny_name
0069 120000      E     LCALL   _TM1640_UM_display
                                           ; SOURCE LINE # 337
006C 120000      E     LCALL   ldelay
                                           ; SOURCE LINE # 339
006F 7B01              MOV     R3,#01H
0071 7A00        R     MOV     R2,#HIGH digi_chk
0073 7900        R     MOV     R1,#LOW digi_chk
0075 120000      E     LCALL   _TM1640_digichk
                                           ; SOURCE LINE # 340
0078 120000      E     LCALL   ldelay
                                           ; SOURCE LINE # 342
007B 7B01              MOV     R3,#01H
007D 7A00        R     MOV     R2,#HIGH blank_L
007F 7900        R     MOV     R1,#LOW blank_L
0081 120000      E     LCALL   _TM1640_L_display
                                           ; SOURCE LINE # 343
0084 7B01              MOV     R3,#01H
0086 7A00        R     MOV     R2,#HIGH blank_L
C51 COMPILER V9.60.0.0   OM3                                                               10/03/2022 19:06:34 PAGE 26  

0088 7900        R     MOV     R1,#LOW blank_L
008A 120000      E     LCALL   _TM1640_U_display
                                           ; SOURCE LINE # 344
008D 7B01              MOV     R3,#01H
008F 7A00        R     MOV     R2,#HIGH blank_L
0091 7900        R     MOV     R1,#LOW blank_L
0093 120000      E     LCALL   _TM1640_M_display
                                           ; SOURCE LINE # 345
0096 120000      E     LCALL   ldelay
                                           ; SOURCE LINE # 346
0099 120000      E     LCALL   ldelay
                                           ; SOURCE LINE # 348
009C 750000      R     MOV     ?_getNumberDisplayFloat?BYTE+04H,#00H
009F 750005      R     MOV     ?_getNumberDisplayFloat?BYTE+05H,#05H
00A2 750000      R     MOV     ?_getNumberDisplayFloat?BYTE+06H,#00H
00A5 750002      R     MOV     ?_getNumberDisplayFloat?BYTE+07H,#02H
00A8 7F00              MOV     R7,#00H
00AA 7E00              MOV     R6,#00H
00AC 7D00              MOV     R5,#00H
00AE 7C00              MOV     R4,#00H
00B0 120000      R     LCALL   _getNumberDisplayFloat
00B3 8B00        R     MOV     output,R3
00B5 8A00        R     MOV     output+01H,R2
00B7 8900        R     MOV     output+02H,R1
                                           ; SOURCE LINE # 349
00B9 120000      E     LCALL   _TM1640_M_display
                                           ; SOURCE LINE # 350
00BC AB00        R     MOV     R3,output
00BE AA00        R     MOV     R2,output+01H
00C0 A900        R     MOV     R1,output+02H
00C2 120000      E     LCALL   _TM1640_U_display
                                           ; SOURCE LINE # 351
00C5 750000      R     MOV     ?_getNumberDisplayFloat?BYTE+04H,#00H
00C8 750006      R     MOV     ?_getNumberDisplayFloat?BYTE+05H,#06H
00CB 900000      R     MOV     DPTR,#precision
00CE E0                MOVX    A,@DPTR
00CF F500        R     MOV     ?_getNumberDisplayFloat?BYTE+06H,A
00D1 A3                INC     DPTR
00D2 E0                MOVX    A,@DPTR
00D3 F500        R     MOV     ?_getNumberDisplayFloat?BYTE+07H,A
00D5 7F00              MOV     R7,#00H
00D7 7E00              MOV     R6,#00H
00D9 7D00              MOV     R5,#00H
00DB 7C00              MOV     R4,#00H
00DD 120000      R     LCALL   _getNumberDisplayFloat
00E0 8B00        R     MOV     output,R3
00E2 8A00        R     MOV     output+01H,R2
00E4 8900        R     MOV     output+02H,R1
                                           ; SOURCE LINE # 352
00E6 120000      E     LCALL   _TM1640_L_display
                                           ; SOURCE LINE # 353
00E9 120000      E     LCALL   loadPricesFromMemory
                                           ; SOURCE LINE # 354
00EC E4                CLR     A
00ED 900000      R     MOV     DPTR,#inputPrice
00F0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 355
00F1 900000      R     MOV     DPTR,#mode
00F4 F0                MOVX    @DPTR,A
00F5 A3                INC     DPTR
00F6 04                INC     A
00F7 F0                MOVX    @DPTR,A
C51 COMPILER V9.60.0.0   OM3                                                               10/03/2022 19:06:34 PAGE 27  

                                           ; SOURCE LINE # 356
00F8 22                RET     
             ; FUNCTION initializeDisplay (END)

C51 COMPILER V9.60.0.0   OM3                                                               10/03/2022 19:06:34 PAGE 28  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


currentPrice . . . . . . . . . . . . .  PUBLIC   XDATA  FLOAT    0000H  4
_TM1640_U_display. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ldelay . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
PCAPWM4. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F6H  1
CCF2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DAH  1
PDTCR. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BDH  1
TB80 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009BH  1
P1M0 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0091H  1
PCAPWM5. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F7H  1
CCF3 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DBH  1
RTCCR. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BEH  1
TB81 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009BH  1
BOREV. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0096H  1
P2M0 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0095H  1
clearPrice . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
PCAPWM6. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F2H  1
CCF4 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DCH  1
P3M0 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B1H  1
P1 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0090H  1
PCAPWM7. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F3H  1
CCF5 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DDH  1
P4M0 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B3H  1
P3M1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B2H  1
P2 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A0H  1
SM01 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009FH  1
SM10 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009EH  1
ISPCR. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E7H  1
XICON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C0H  1
P3 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
SM11 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009EH  1
SM20 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009DH  1
P4 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E8H  1
AC . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D6H  1
P6M0 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B5H  1
SM21 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009DH  1
_getNumberDisplayFloat . . . . . . . .  PUBLIC   CODE   PROC     0013H  -----
  x. . . . . . . . . . . . . . . . . .  AUTO     DATA   FLOAT    0000H  4
  displayLength. . . . . . . . . . . .  AUTO     DATA   INT      0004H  2
  precision. . . . . . . . . . . . . .  AUTO     DATA   INT      0006H  2
  value. . . . . . . . . . . . . . . .  AUTO     DATA   ARRAY    0008H  8
  t. . . . . . . . . . . . . . . . . .  AUTO     DATA   ARRAY    0010H  8
  value_len. . . . . . . . . . . . . .  AUTO     DATA   INT      0018H  2
  set_flag . . . . . . . . . . . . . .  AUTO     DATA   INT      001AH  2
  after_display. . . . . . . . . . . .  AUTO     DATA   INT      001CH  2
  y. . . . . . . . . . . . . . . . . .  * REG *  DATA   INT      0006H  2
  i. . . . . . . . . . . . . . . . . .  AUTO     DATA   INT      001EH  2
  index. . . . . . . . . . . . . . . .  * REG *  DATA   INT      0006H  2
  a. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
EIE1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ADH  1
SPCON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0085H  1
P6 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F8H  1
WDTCR. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E1H  1
SISTA. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D3H  1
SFRPI. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ACH  1
EA . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AFH  1
ADCFG0 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C3H  1
S1CFG1 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009DH  1
C51 COMPILER V9.60.0.0   OM3                                                               10/03/2022 19:06:34 PAGE 29  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


ADCFG1 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BBH  1
S1CFG2 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009DH  1
CF . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DFH  1
scan_keypad. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CH . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F9H  1
PWMCR. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BCH  1
_sprintf . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
weight . . . . . . . . . . . . . . . .  PUBLIC   XDATA  FLOAT    0004H  4
RTCTM. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B6H  1
IE . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A8H  1
CL . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E9H  1
isDecimal. . . . . . . . . . . . . . .  PUBLIC   XDATA  INT      0008H  2
CCAP0H . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FAH  1
CCAP1H . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FBH  1
IP0H . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B7H  1
size_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
CCAP2H . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FCH  1
CCAP3H . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FDH  1
initializeDisplay. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
CCAP4H . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FEH  1
CCAP0L . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EAH  1
CR . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DEH  1
CCAP5H . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FFH  1
CCAP1L . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EBH  1
CCAPM0 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DAH  1
EXF2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CEH  1
IP0L . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B8H  1
REN0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009CH  1
CCAP6H . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FAH  1
CCAP2L . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ECH  1
CCAPM1 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DBH  1
ADCON0 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C4H  1
REN1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009CH  1
CCAP7H . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FBH  1
CCAP3L . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EDH  1
CCAPM2 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DCH  1
CCAP4L . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EEH  1
CCAPM3 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DDH  1
CCAP5L . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EFH  1
CCAPM4 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DEH  1
CCAP6L . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EAH  1
CCAPM5 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DFH  1
handleModeOne. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
CCAP7L . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EBH  1
CCAPM6 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DAH  1
CY . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D7H  1
_strlen. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CCAPM7 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DBH  1
compny_name. . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    000AH  20
loadMemory . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  x. . . . . . . . . . . . . . . . . .  AUTO     DATA   FLOAT    0000H  4
CKCON0 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C7H  1
overflowHex. . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    001EH  6
CKCON1 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BFH  1
PT0L . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B9H  1
loadPricesFromMemory . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
RCAP2H . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CBH  1
C51 COMPILER V9.60.0.0   OM3                                                               10/03/2022 19:06:34 PAGE 30  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


PT1L . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BBH  1
PT2L . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BDH  1
SP . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0081H  1
CMOD . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D9H  1
CCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D8H  1
OV . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D2H  1
PX0L . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B8H  1
key_display. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  temp . . . . . . . . . . . . . . . .  AUTO     DATA   ARRAY    0000H  6
_TM1640_digichk. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
PAOE . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F1H  1
SI1ADR . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D1H  1
RCAP2L . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CAH  1
PX1L . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BAH  1
main . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
total. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  FLOAT    0024H  4
mode . . . . . . . . . . . . . . . . .  PUBLIC   XDATA  INT      0028H  2
PX2L . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BEH  1
SCMD . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E6H  1
SI1DAT . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D2H  1
PX3L . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BFH  1
SFIE . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008EH  1
C_T2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C9H  1
inputPrice . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    002AH  7
CHRL . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CFH  1
_atof. . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Keypad_GPIO_Config . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
RCLK . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CDH  1
getWeight. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CLRL . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CEH  1
SI1CON . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D4H  1
TCLK . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CCH  1
IFADRH . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E3H  1
IFMT . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E5H  1
P10. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0090H  1
P20. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A0H  1
P11. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0091H  1
P30. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B0H  1
P21. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A1H  1
P12. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0092H  1
P40. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E8H  1
IFADRL . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E4H  1
P31. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B1H  1
P22. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A2H  1
P13. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0093H  1
output . . . . . . . . . . . . . . . .  PUBLIC   DATA   PTR      0000H  3
P41. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E9H  1
P32. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B2H  1
P23. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A3H  1
SMCCFG . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009DH  1
LINCFG . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009DH  1
P14. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0094H  1
TMOD . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0089H  1
TCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0088H  1
P60. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F8H  1
P33. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B3H  1
P24. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A4H  1
C51 COMPILER V9.60.0.0   OM3                                                               10/03/2022 19:06:34 PAGE 31  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


P15. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0095H  1
isOverflow . . . . . . . . . . . . . .  PUBLIC   XDATA  INT      0031H  2
blank_L. . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0033H  6
digi_chk . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0039H  7
P61. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F9H  1
SIS1TA . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D3H  1
PUCON0 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B4H  1
P34. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B4H  1
P25. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A5H  1
P16. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0096H  1
temp . . . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0040H  1
bat_digi . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0041H  5
P44. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ECH  1
PUCON1 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B4H  1
P35. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B5H  1
P26. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A6H  1
P17. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0097H  1
TM1640_GPIO_Config . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
P45. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EDH  1
P27. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A7H  1
hi_key_no. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0046H  1
P47. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EFH  1
KBMASK . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D7H  1
IE0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0089H  1
IE1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008BH  1
IE2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C1H  1
B. . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F0H  1
IE3. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C5H  1
KBPATN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D5H  1
CP_RL2 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C8H  1
lo_key_no. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0047H  1
prc. . . . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0048H  5
no_digits. . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    004DH  10
_joinCharacter . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ACC. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E0H  1
bat_voltg. . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0057H  5
ES0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ACH  1
afterDecimal . . . . . . . . . . . . .  PUBLIC   XDATA  INT      005CH  2
ET0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A9H  1
key. . . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   005EH  1
ET1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ABH  1
TF0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008DH  1
ET2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ADH  1
RI0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0098H  1
TF1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008FH  1
_TM1640_UM_display . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
TF2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CFH  1
RI1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0098H  1
TH0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008CH  1
_getPriceFromMemory. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
EX0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A8H  1
TI0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0099H  1
TH1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008DH  1
IT0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0088H  1
ver. . . . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    005FH  6
TH2. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CDH  1
EX1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AAH  1
C51 COMPILER V9.60.0.0   OM3                                                               10/03/2022 19:06:34 PAGE 32  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


TI1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0099H  1
IT1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008AH  1
P. . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D0H  1
IT2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C0H  1
EX2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C2H  1
savingTo . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0065H  1
IT3. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C4H  1
EX3. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C6H  1
TL0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008AH  1
TL1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008BH  1
precision. . . . . . . . . . . . . . .  PUBLIC   XDATA  INT      0066H  2
TL2. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CCH  1
IFD. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E2H  1
S0CFG. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009CH  1
RS0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D3H  1
ADCDH. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C6H  1
S1CFG. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009CH  1
RS1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D4H  1
TR0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008CH  1
TR1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008EH  1
TR2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CAH  1
EIP1H. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00AFH  1
ADCDL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C5H  1
_Delay_Some_Time . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
P1AIO. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0092H  1
EIP1L. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00AEH  1
S1BRC. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009BH  1
DPH. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0083H  1
DPL. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0082H  1
S0BUF. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0099H  1
PCON0. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0087H  1
SPSTAT . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0084H  1
S1BUF. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0099H  1
PCON1. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0097H  1
EXEN2. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CBH  1
_TM1640_Init . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
S0CON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0098H  1
S1CON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0098H  1
INT2H. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C3H  1
displayWeight. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
T2MOD. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C9H  1
T2CON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C8H  1
INT3H. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C7H  1
final_display. . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0068H  7
SADEN. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B9H  1
SM00_FE. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009FH  1
wchar_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
S1BRT. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009AH  1
KBCON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D6H  1
PSL. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BCH  1
SADDR. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A9H  1
handleNumberInput. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
displayPrice . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
AUXR0. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A1H  1
XICFG. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C1H  1
AUXR1. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A2H  1
AUXR2. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A3H  1
C51 COMPILER V9.60.0.0   OM3                                                               10/03/2022 19:06:34 PAGE 33  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


SIADR. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D1H  1
AUXR3. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A4H  1
_key_sort. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  temp_key . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_TM1640_L_display. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
F0 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D5H  1
_TM1640_M_display. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SIDAT. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D2H  1
F1 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D1H  1
addToInputPrice. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
PCAPWM0. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F2H  1
PSW. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D0H  1
PCAPWM1. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F3H  1
PCAPWM2. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F4H  1
CCF0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D8H  1
RB80 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009AH  1
PCAPWM3. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F5H  1
CCF1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D9H  1
SICON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D4H  1
RB81 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009AH  1
SPDAT. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0086H  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1696    ----
   CONSTANT SIZE    =     20    ----
   XDATA SIZE       =    111    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3      42
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
