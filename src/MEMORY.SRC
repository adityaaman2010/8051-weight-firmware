; .\MEMORY.SRC generated from: .\MEMORY.C
; COMPILER INVOKED BY:
;        C:\Keil_v5\C51\BIN\C51.exe .\MEMORY.C OMF2 TABS(4) CODE NOCOND SYMBOLS PRINT(.\build\Target 1\memory.lst) INCDIR(../../../../../../Keil_v5/C51/INC) DEFINE(__UVISION_VERSION=526) OPTIMIZE(8,SIZE) SMALL ROM(LARGE) OBJECT(.\build\Target 1\memory.o)

$NOMOD51

NAME	MEMORY

PCAPWM4	DATA	0F6H
CCF2	BIT	0D8H.2
PDTCR	DATA	0BDH
TB80	BIT	098H.3
P1M0	DATA	091H
PCAPWM5	DATA	0F7H
CCF3	BIT	0D8H.3
RTCCR	DATA	0BEH
TB81	BIT	098H.3
BOREV	DATA	096H
P2M0	DATA	095H
PCAPWM6	DATA	0F2H
CCF4	BIT	0D8H.4
P3M0	DATA	0B1H
P1	DATA	090H
PCAPWM7	DATA	0F3H
CCF5	BIT	0D8H.5
P4M0	DATA	0B3H
P3M1	DATA	0B2H
P2	DATA	0A0H
SM01	BIT	098H.7
SM10	BIT	098H.6
ISPCR	DATA	0E7H
XICON	DATA	0C0H
P3	DATA	0B0H
SM11	BIT	098H.6
SM20	BIT	098H.5
P4	DATA	0E8H
AC	BIT	0D0H.6
P6M0	DATA	0B5H
SM21	BIT	098H.5
EIE1	DATA	0ADH
SPCON	DATA	085H
P6	DATA	0F8H
WDTCR	DATA	0E1H
SISTA	DATA	0D3H
SFRPI	DATA	0ACH
EA	BIT	0A8H.7
ADCFG0	DATA	0C3H
S1CFG1	DATA	09DH
ADCFG1	DATA	0BBH
S1CFG2	DATA	09DH
CF	BIT	0D8H.7
CH	DATA	0F9H
PWMCR	DATA	0BCH
RTCTM	DATA	0B6H
IE	DATA	0A8H
CL	DATA	0E9H
CCAP0H	DATA	0FAH
CCAP1H	DATA	0FBH
IP0H	DATA	0B7H
CCAP2H	DATA	0FCH
CCAP3H	DATA	0FDH
CCAP4H	DATA	0FEH
CCAP0L	DATA	0EAH
CR	BIT	0D8H.6
CCAP5H	DATA	0FFH
CCAP1L	DATA	0EBH
CCAPM0	DATA	0DAH
EXF2	BIT	0C8H.6
IP0L	DATA	0B8H
REN0	BIT	098H.4
CCAP6H	DATA	0FAH
CCAP2L	DATA	0ECH
CCAPM1	DATA	0DBH
ADCON0	DATA	0C4H
REN1	BIT	098H.4
CCAP7H	DATA	0FBH
CCAP3L	DATA	0EDH
CCAPM2	DATA	0DCH
CCAP4L	DATA	0EEH
CCAPM3	DATA	0DDH
CCAP5L	DATA	0EFH
CCAPM4	DATA	0DEH
CCAP6L	DATA	0EAH
CCAPM5	DATA	0DFH
CCAP7L	DATA	0EBH
CCAPM6	DATA	0DAH
CY	BIT	0D0H.7
CCAPM7	DATA	0DBH
CKCON0	DATA	0C7H
CKCON1	DATA	0BFH
PT0L	BIT	0B8H.1
RCAP2H	DATA	0CBH
PT1L	BIT	0B8H.3
PT2L	BIT	0B8H.5
SP	DATA	081H
CMOD	DATA	0D9H
CCON	DATA	0D8H
OV	BIT	0D0H.2
PX0L	BIT	0B8H.0
PAOE	DATA	0F1H
SI1ADR	DATA	0D1H
RCAP2L	DATA	0CAH
PX1L	BIT	0B8H.2
PX2L	BIT	0B8H.6
SCMD	DATA	0E6H
SI1DAT	DATA	0D2H
PX3L	BIT	0B8H.7
SFIE	DATA	08EH
C_T2	BIT	0C8H.1
CHRL	DATA	0CFH
RCLK	BIT	0C8H.5
CLRL	DATA	0CEH
SI1CON	DATA	0D4H
TCLK	BIT	0C8H.4
IFADRH	DATA	0E3H
IFMT	DATA	0E5H
P10	BIT	090H.0
P20	BIT	0A0H.0
P11	BIT	090H.1
P30	BIT	0B0H.0
P21	BIT	0A0H.1
P12	BIT	090H.2
P40	BIT	0E8H.0
IFADRL	DATA	0E4H
P31	BIT	0B0H.1
P22	BIT	0A0H.2
P13	BIT	090H.3
P41	BIT	0E8H.1
P32	BIT	0B0H.2
P23	BIT	0A0H.3
SMCCFG	DATA	09DH
LINCFG	DATA	09DH
P14	BIT	090H.4
TMOD	DATA	089H
TCON	DATA	088H
P60	BIT	0F8H.0
P33	BIT	0B0H.3
P24	BIT	0A0H.4
P15	BIT	090H.5
P61	BIT	0F8H.1
SIS1TA	DATA	0D3H
PUCON0	DATA	0B4H
P34	BIT	0B0H.4
P25	BIT	0A0H.5
P16	BIT	090H.6
P44	BIT	0E8H.4
PUCON1	DATA	0B4H
P35	BIT	0B0H.5
P26	BIT	0A0H.6
P17	BIT	090H.7
P45	BIT	0E8H.5
P27	BIT	0A0H.7
P47	BIT	0E8H.7
KBMASK	DATA	0D7H
IE0	BIT	088H.1
IE1	BIT	088H.3
IE2	BIT	0C0H.1
B	DATA	0F0H
IE3	BIT	0C0H.5
KBPATN	DATA	0D5H
CP_RL2	BIT	0C8H.0
ACC	DATA	0E0H
ES0	BIT	0A8H.4
ET0	BIT	0A8H.1
ET1	BIT	0A8H.3
TF0	BIT	088H.5
ET2	BIT	0A8H.5
RI0	BIT	098H.0
TF1	BIT	088H.7
TF2	BIT	0C8H.7
RI1	BIT	098H.0
TH0	DATA	08CH
EX0	BIT	0A8H.0
TI0	BIT	098H.1
TH1	DATA	08DH
IT0	BIT	088H.0
TH2	DATA	0CDH
EX1	BIT	0A8H.2
TI1	BIT	098H.1
IT1	BIT	088H.2
P	BIT	0D0H.0
IT2	BIT	0C0H.0
EX2	BIT	0C0H.2
IT3	BIT	0C0H.4
EX3	BIT	0C0H.6
TL0	DATA	08AH
TL1	DATA	08BH
TL2	DATA	0CCH
IFD	DATA	0E2H
S0CFG	DATA	09CH
RS0	BIT	0D0H.3
ADCDH	DATA	0C6H
S1CFG	DATA	09CH
RS1	BIT	0D0H.4
TR0	BIT	088H.4
TR1	BIT	088H.6
TR2	BIT	0C8H.2
EIP1H	DATA	0AFH
ADCDL	DATA	0C5H
P1AIO	DATA	092H
EIP1L	DATA	0AEH
S1BRC	DATA	09BH
DPH	DATA	083H
DPL	DATA	082H
S0BUF	DATA	099H
PCON0	DATA	087H
SPSTAT	DATA	084H
S1BUF	DATA	099H
PCON1	DATA	097H
EXEN2	BIT	0C8H.3
S0CON	DATA	098H
S1CON	DATA	098H
INT2H	BIT	0C0H.3
T2MOD	DATA	0C9H
T2CON	DATA	0C8H
INT3H	BIT	0C0H.7
SADEN	DATA	0B9H
SM00_FE	BIT	098H.7
S1BRT	DATA	09AH
KBCON	DATA	0D6H
PSL	BIT	0B8H.4
SADDR	DATA	0A9H
AUXR0	DATA	0A1H
XICFG	DATA	0C1H
AUXR1	DATA	0A2H
AUXR2	DATA	0A3H
SIADR	DATA	0D1H
AUXR3	DATA	0A4H
F0	BIT	0D0H.5
SIDAT	DATA	0D2H
F1	BIT	0D0H.1
PCAPWM0	DATA	0F2H
PSW	DATA	0D0H
PCAPWM1	DATA	0F3H
PCAPWM2	DATA	0F4H
CCF0	BIT	0D8H.0
RB80	BIT	098H.2
PCAPWM3	DATA	0F5H
CCF1	BIT	0D8H.1
SICON	DATA	0D4H
RB81	BIT	098H.2
SPDAT	DATA	086H
?PR?loadPricesFromMemory?MEMORY          SEGMENT CODE 
?PR?_getPriceFromMemory?MEMORY           SEGMENT CODE 
?DT?_getPriceFromMemory?MEMORY           SEGMENT DATA OVERLAYABLE
?PR?_savePriceToMemory?MEMORY            SEGMENT CODE 
?DT?_savePriceToMemory?MEMORY            SEGMENT DATA OVERLAYABLE
?C_INITSEG           SEGMENT CODE 
?XD?MEMORY           SEGMENT XDATA 
	EXTRN	CODE (?C?CCASE)
	EXTRN	CODE (?C?LLDXDATA)
	PUBLIC	memoryTwo
	PUBLIC	memorySix
	PUBLIC	memoryOne
	PUBLIC	memoryFour
	PUBLIC	memoryFive
	PUBLIC	memorySeven
	PUBLIC	memoryThree
	PUBLIC	?_savePriceToMemory?BYTE
	PUBLIC	_savePriceToMemory
	PUBLIC	_getPriceFromMemory
	PUBLIC	loadPricesFromMemory

	RSEG  ?DT?_getPriceFromMemory?MEMORY
?_getPriceFromMemory?BYTE:
     result?141:   DS   4

	RSEG  ?DT?_savePriceToMemory?MEMORY
?_savePriceToMemory?BYTE:
        key?242:   DS   1
	ORG  1
      price?243:   DS   4
	ORG  5
  start_add?244:   DS   1
	ORG  6
    end_add?245:   DS   1

	RSEG  ?XD?MEMORY
    memoryThree:   DS   4
    memorySeven:   DS   4
     memoryFive:   DS   4
     memoryFour:   DS   4
      memoryOne:   DS   4
      memorySix:   DS   4
      memoryTwo:   DS   4

	RSEG  ?C_INITSEG
	DB	044H
	DW	memoryOne
	DB	043H,04AH,080H,000H	; 202.500000

	DB	044H
	DW	memoryTwo
	DB	042H,0B5H,033H,033H	; 90.599998

	DB	044H
	DW	memoryThree
	DB	0BFH,080H,000H,000H	; -1.000000

	DB	044H
	DW	memoryFour
	DB	0BFH,080H,000H,000H	; -1.000000

	DB	044H
	DW	memoryFive
	DB	0BFH,080H,000H,000H	; -1.000000

	DB	044H
	DW	memorySix
	DB	0BFH,080H,000H,000H	; -1.000000

	DB	044H
	DW	memorySeven
	DB	0BFH,080H,000H,000H	; -1.000000

; //
; // Created by aditya on 11-10-2022.
; //
; #pragma SRC
; #include "memory.h"
; #include "REG_MG82FG5Bxx.h"
; #include "macro.h"
; 
; float xdata memoryOne = 202.5;
; float xdata memoryTwo = 90.6;
; float xdata memoryThree = -1;
; float xdata memoryFour = -1;
; float xdata memoryFive = -1;
; float xdata memorySix = -1;
; float xdata memorySeven = -1;
; 
; 
; void loadPricesFromMemory(void)

	RSEG  ?PR?loadPricesFromMemory?MEMORY
loadPricesFromMemory:
	USING	0
			; SOURCE LINE # 18
; {
			; SOURCE LINE # 19
; 
; }
			; SOURCE LINE # 21
	RET  	
; END OF loadPricesFromMemory

; 
; float getPriceFromMemory(unsigned char key)

	RSEG  ?PR?_getPriceFromMemory?MEMORY
_getPriceFromMemory:
	USING	0
			; SOURCE LINE # 23
;---- Variable 'key?140' assigned to Register 'R7' ----
; {
			; SOURCE LINE # 24
;     float result;
;     switch (key)
			; SOURCE LINE # 26
	MOV  	A,R7
	LCALL	?C?CCASE
	DW   	?C0003
	DB   	011H
	DW   	?C0004
	DB   	012H
	DW   	?C0005
	DB   	013H
	DW   	?C0006
	DB   	014H
	DW   	?C0007
	DB   	015H
	DW   	?C0008
	DB   	016H
	DW   	?C0009
	DB   	017H
	DW   	00H
	DW   	?C0010
;     {
			; SOURCE LINE # 27
;     case 17:
			; SOURCE LINE # 28
?C0003:
;         result = memoryOne;
			; SOURCE LINE # 29
	MOV  	DPTR,#memoryOne
;         break;
			; SOURCE LINE # 30
	SJMP 	?C0026
;     case 18:
			; SOURCE LINE # 31
?C0004:
;         result = memoryTwo;
			; SOURCE LINE # 32
	MOV  	DPTR,#memoryTwo
?C0021:
;         break;
			; SOURCE LINE # 33
	SJMP 	?C0026
;     case 19:
			; SOURCE LINE # 34
?C0005:
;         result = memoryThree;
			; SOURCE LINE # 35
	MOV  	DPTR,#memoryThree
?C0022:
;         break;
			; SOURCE LINE # 36
	SJMP 	?C0026
;     case 20:
			; SOURCE LINE # 37
?C0006:
;         result = memoryFour;
			; SOURCE LINE # 38
	MOV  	DPTR,#memoryFour
?C0023:
;         break;
			; SOURCE LINE # 39
	SJMP 	?C0026
;     case 21:
			; SOURCE LINE # 40
?C0007:
;         result = memoryFive;
			; SOURCE LINE # 41
	MOV  	DPTR,#memoryFive
?C0024:
;         break;
			; SOURCE LINE # 42
	SJMP 	?C0026
;     case 22:
			; SOURCE LINE # 43
?C0008:
;         result = memorySix;
			; SOURCE LINE # 44
	MOV  	DPTR,#memorySix
?C0025:
;         break;
			; SOURCE LINE # 45
	SJMP 	?C0026
;     case 23:
			; SOURCE LINE # 46
?C0009:
;         result = memorySeven;
			; SOURCE LINE # 47
	MOV  	DPTR,#memorySeven
?C0026:
	LCALL	?C?LLDXDATA
	MOV  	result?141+03H,R7
	MOV  	result?141+02H,R6
	MOV  	result?141+01H,R5
	MOV  	result?141,R4
;         break;
			; SOURCE LINE # 48
	SJMP 	?C0002
;     default:
			; SOURCE LINE # 49
?C0010:
;         result = -1;
			; SOURCE LINE # 50
	CLR  	A
	MOV  	result?141+03H,A
	MOV  	result?141+02H,A
	MOV  	result?141+01H,#080H
	MOV  	result?141,#0BFH
;         break;
			; SOURCE LINE # 51
;     }
			; SOURCE LINE # 52
?C0002:
;     return result;
			; SOURCE LINE # 53
	MOV  	R7,result?141+03H
	MOV  	R6,result?141+02H
	MOV  	R5,result?141+01H
	MOV  	R4,result?141
; }
			; SOURCE LINE # 54
	RET  	
; END OF _getPriceFromMemory

; 
; void savePriceToMemory(unsigned char key, float price)

	RSEG  ?PR?_savePriceToMemory?MEMORY
_savePriceToMemory:
	USING	0
			; SOURCE LINE # 56
;---- Variable 'key?242' assigned to Register 'R7' ----
; {
			; SOURCE LINE # 57
;     unsigned char start_add, end_add;
;     switch (key){
			; SOURCE LINE # 59
	MOV  	A,R7
	LCALL	?C?CCASE
	DW   	?C0013
	DB   	011H
	DW   	?C0014
	DB   	012H
	DW   	?C0015
	DB   	013H
	DW   	?C0016
	DB   	014H
	DW   	?C0017
	DB   	015H
	DW   	?C0018
	DB   	016H
	DW   	?C0019
	DB   	017H
	DW   	00H
	DW   	?C0012
;     case 17:
			; SOURCE LINE # 60
?C0013:
;         start_add = 0x00;
			; SOURCE LINE # 61
	CLR  	A
	MOV  	start_add?244,A
;         end_add = 0x03;
			; SOURCE LINE # 62
	MOV  	end_add?245,#03H
;         break;
			; SOURCE LINE # 63
	SJMP 	?C0012
;     case 18:
			; SOURCE LINE # 64
?C0014:
;         start_add = 0x04;
			; SOURCE LINE # 65
	MOV  	start_add?244,#04H
;         end_add = 0x07;
			; SOURCE LINE # 66
	MOV  	end_add?245,#07H
;         break;
			; SOURCE LINE # 67
	SJMP 	?C0012
;     case 19:
			; SOURCE LINE # 68
?C0015:
;         start_add = 0x08;
			; SOURCE LINE # 69
	MOV  	start_add?244,#08H
;         end_add = 0x0b;
			; SOURCE LINE # 70
	MOV  	end_add?245,#0BH
;         break;
			; SOURCE LINE # 71
	SJMP 	?C0012
;     case 20:
			; SOURCE LINE # 72
?C0016:
;         start_add = 0x0c;
			; SOURCE LINE # 73
	MOV  	start_add?244,#0CH
;         end_add = 0x0f;
			; SOURCE LINE # 74
	MOV  	end_add?245,#0FH
;         break;
			; SOURCE LINE # 75
	SJMP 	?C0012
;     case 21:
			; SOURCE LINE # 76
?C0017:
;         start_add = 0x10;
			; SOURCE LINE # 77
	MOV  	start_add?244,#010H
;         end_add = 0x13;
			; SOURCE LINE # 78
	MOV  	end_add?245,#013H
;         break;
			; SOURCE LINE # 79
	SJMP 	?C0012
;     case 22:
			; SOURCE LINE # 80
?C0018:
;         start_add = 0x14;
			; SOURCE LINE # 81
	MOV  	start_add?244,#014H
;         end_add = 0x17;
			; SOURCE LINE # 82
	MOV  	end_add?245,#017H
;         break;
			; SOURCE LINE # 83
	SJMP 	?C0012
;     case 23:
			; SOURCE LINE # 84
?C0019:
;         start_add = 0x18;
			; SOURCE LINE # 85
	MOV  	start_add?244,#018H
;         end_add = 0x1b;
			; SOURCE LINE # 86
	MOV  	end_add?245,#01BH
;         break;
			; SOURCE LINE # 87
; 
;     }
			; SOURCE LINE # 89
?C0012:
; 
;     #pragma asm
;         MOV CKCON1,#00001011b
	  MOV CKCON1,#00001011b
;         MOV ISPCR,#10000000b 
	  MOV ISPCR,#10000000b 
;         MOV IFMT,#02h ; 
	  MOV IFMT,#02h ; 
;         MOV IFADRH, start_add 
	  MOV IFADRH, start_add 
;         MOV IFADRL, end_add
	  MOV IFADRL, end_add
;         MOV IFD, price 
	  MOV IFD, price 
;         MOV SCMD,#46h
	  MOV SCMD,#46h
;         MOV SCMD,#0B9h
	  MOV SCMD,#0B9h
; 
	  
;         MOV IFMT,#00h
	  MOV IFMT,#00h
;         MOV ISPCR,#00000000b
	  MOV ISPCR,#00000000b
;     #pragma endasm
; 
; }			; SOURCE LINE # 105
	RET  	
; END OF _savePriceToMemory

	END
